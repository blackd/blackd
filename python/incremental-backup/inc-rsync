#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2010 Plamen K. Kosseff

# Author: Plamen K. Kosseff <p.kosseff [ a t ] anti-ad.org>
# Version: 1.0
# Keywords: incremental, backup, rsync
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation; version 3
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with inc-rsync; see the file COPYING. If not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# Commentary: This script is not part of rsync package.

# TODO: Make an egg, Localize

import sys, os

#do some sanity checking first
if sys.version_info < (2, 6) :
    print ('This script requires at lease Python verion 2.6!')
    sys.exit(1)
if os.name != 'posix':
    print ('This script requires posix compatible OS!')
    sys.exit(1)
    


import subprocess, logging, logging.handlers, argparse, time, tempfile, string, shutil, select, fcntl
from datetime import datetime
from threading import Thread, Event, Timer

if sys.version_info < (3, 0) :
    from exceptions import *




try:
    import pexpect
except Exception as e:  
    pexpect = None
    pass


rsync_pass_file = '--password-file={password_file}'
rsync_other_args = '--delete --link-dest=../prev/'
rsync_cmd = 'rsync {insert_point} --dry-run --archive --itemize-changes --numeric-ids --hard-links --one-file-system --human-readable {other_args}  {source} {base}{target}/'

current_backup=datetime.now().strftime('%Y-%m-%dT%H:%M')

log = None
args = None
exitcode = 0

ssh_tunnel_proc = None
tunnel_event = Event()

log_levels = {
    'critical' : logging.CRITICAL,
    'error' : logging.ERROR,
    'warning' : logging.WARNING,
    'info' : logging.INFO,
    'debug' : logging.DEBUG,
    }



class PartialFormatter(string.Formatter):
    """ 
    As the name may suggest this class formats strings and leaves unspecified values unchanged.
    For example if we have string 
    \tmsg = 'Msg {v1} {v2}' 
    \tfmt = PartialFormatter().format(msg, v2='10')
    fmt will have value 'Msg {v1} 10'
    Not tested with possitional arguments!
    """    
    def check_unused_args(self, used_args, args, kwargs):
        pass

    def get_value(self, key, args, kwargs):
        try:
            return string.Formatter.get_value(self, key, args, kwargs)
        except:
            return '{' + key + '}'

class BackupException(Exception):
    """
    Used for errors generated by this script
    """
    def __init__(self, val):
        self.value= val

    def __str__(self):
        return repr(self.value)



def create_logger():
    global log
    log = logging.getLogger('BACKUP')
    log.setLevel(1);
    handler = logging.StreamHandler(sys.stdout);
    formatter = logging.Formatter('[%(levelname)s] %(message)s');
    handler.setFormatter(formatter)
    handler.setLevel(log_levels.get(args.debug[0], 'error'))
    log.addHandler(handler)

    if args.log_file:
        handler = logging.FileHandler(args.log_file[0]);
        formatter = logging.Formatter('[%(levelname)s] %(filename)s:%(lineno)d --> %(module)s::%(funcName)s - %(message)s');
        handler.setFormatter(formatter)
        handler.setLevel(1)
        log.addHandler(handler)

    log.debug("\n\n\n\n\nNew instance (%d)", os.getpid() )


def log_arguments():

    log.debug('Parsed arguments:')
    log.debug('\tTYPE = "%s".', args.type)
    log.debug('\tSOURCE = "%s".', args.dir)
    log.debug('\tTARGET = "%s".', args.url)
    if args.password_file:
        log.debug('\tPASSWORD_FILE = "%s".', args.password_file)
    if args.ssh_password_file:
        log.debug('\tSSH_PASSWORD_FILE = "%s".', args.ssh_password_file)
    if args.ssh_tunnel:
        log.debug('\tSSH_TUNNEL = "%s" "%s".', None if args.ssh_tunnel == None else args.ssh_tunnel[0], None if args.ssh_tunnel == None else args.ssh_tunnel[1])
    if args.prologue:
        log.debug('\tPROLOGUE = "%s".', args.prologue)
    if args.epilogue:
        log.debug('\tEPILOGUE = "%s".', args.epilogue)
    log.debug('\tDRY-RUN = "%r"', args.dry_run)


def parse_arguments():
    global args
    parser = argparse.ArgumentParser(description='Incremental backup of a directory over rsync.')   

    parser.add_argument('type', metavar='TYPE', 
                        choices=('inc', 'full', 'continue', 'tunnel'),
                        help='Type of backup to perform. \nPossible values are "full", "inc", "continue". "full": Prerforms a full backup. Everything from SOURCE will be transfered to TARGET.')

    parser.add_argument('dir', metavar='SOURCE', 
                        help='The source of the backup. It MUST exist and MUST be a directory.')
    parser.add_argument('url', metavar='TARGET', 
                        help='The target of the backup. It MUST exist and MUST be a directory.')
    parser.add_argument('-p', '--password-file', 
                        nargs=1, 
                        help='This option will be passed to rsync and have the same meaning as the same option in rsync')

    parser.add_argument('-t', '--ssh-tunnel', 
                        metavar=('user@host', 'localhost:localport:remotehost:remoteport'), 
                        nargs=2, 
                        help='Create an ssh tunnel as in "ssh host -N -f -L localhost:localport:host:port". '
                        'Just creating a tunnel does not means that is will be uses the URL has to actually point to the tunnel')
    parser.add_argument('-s', '--ssh-password-file', 
                        nargs=1,
                        help='The file that contains the password needed for the ssh tunnel. Needs "sshpass" to be available. Same format as the password file for rsync')
    parser.add_argument('-d', '--debug',
                        metavar='LEVEL',
                        nargs=1,
                        default=list(['error']),
                        type=str,
                        choices=('error', 'warning', 'info', 'debug'),
                        help='Controls how much information will be printed on the console. LEVEL may be one of error, warning, info or debug. Default is error')
    
    parser.add_argument('-P', '--prologue', 
                        nargs=1,
                        metavar='COMMAND',
                        help='Executes tha command before any other operations.')

    parser.add_argument('-e', '--epilogue', 
                        nargs=1,
                        metavar='COMMAND',
                        help='Executes tha command just before exit.')

    parser.add_argument('-l', '--log-file', 
                        nargs=1,
                        metavar='FILE',
                        help='Outputs debug information to FILE.')

    parser.add_argument('-n', '--dry-run',    
                        action='store_true',
                        help='Test run no changes will be made in TARGET.')

    parser.add_argument('--no-delete',    
                        action='store_true',
                        help='Don\'t pass --delete parameter to rsync.')

    args = parser.parse_args();
    if not args.url.endswith('/'):
        args.url = args.url + '/'



def create_tunnel():
    """Creates an ssh tunnel.
    If --ssh_password_file is specified uses "pexpect" module to pass the content
    of the file to ssh.
    Else either you need to enter the password manualy or use public key athentication/
    """
    global ssh_tunnel_proc, tunnel_event
    log.info('Create ssh tunnel...')
    cmd_line = '/usr/bin/ssh -N {host} -L {redir}'.format(host=args.ssh_tunnel[0], redir=args.ssh_tunnel[1])
    log.debug('ssh command: %s', cmd_line)
    def run_no_pexpext():
        global ssh_tunnel_proc, tunnel_event
        ssh_tunnel_proc = subprocess.Popen(cmd_line.split(' '), bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
       
        Timer(5.0, tunnel_event.set).start()
        while ssh_tunnel_proc.poll() is None:
            c = str(ssh_tunnel_proc.stdout.read(100))
            log.debug('ssh_tunnel: %s', c)
        tunnel_event.set()

    def run_pexpect():
        global ssh_tunnel_proc, tunnel_event
        f = open(args.ssh_password_file[0], 'r')
        p = f.read()
        f.close()
        ssh_tunnel_proc = pexpect.spawn(cmd_line,timeout=None,maxread=100)
        ssh_tunnel_proc.expect ('assword:')
        time.sleep (0.1)
        ssh_tunnel_proc.sendline(p)
        p = ''
        Timer(1.0, tunnel_event.set).start()
        ssh_tunnel_proc.expect(pexpect.EOF)
        tunnel_event.set()

    if args.ssh_password_file:
        if not pexpect :
            log.error('Cannot find "pexpect" module. To use --ssh_password_file you need to install "pexpect"\n.')
            raise BackupException('pexpect is not available and --ssh_password_file passed. Cannot continue!')
        tunnel_event.clear()
        tunnel_th = Thread(target=run_pexpect)
        tunnel_th.start()
        tunnel_event.wait()
        tunnel_event.clear()
    else:
        tunnel_event.clear()
        tunnel_th = Thread(target=run_no_pexepect)
        tunnel_th.start()
        tunnel_event.wait()
        tunnel_event.clear()
        pass
    return True;



def term_ssh_tunnel():
    global ssh_tunnel_proc, args
    if log:
        if args:
            if args.ssh_tunnel and ssh_tunnel_proc:
                log.info('Stopping ssh tunnel')
                if hasattr(ssh_tunnel_proc, 'close'):
                    log.debug("sending ssh SIGTERM")
                    ssh_tunnel_proc.kill(15)
                    time.sleep(1)
                    log.debug("sending ssh SIGKILL")
                    ssh_tunnel_proc.kill(9)
                else:
                    log.debug("sending ssh SIGTERM")
                    ssh_tunnel_proc.terminate();
                    time.sleep(1)
                    log.debug("sending ssh SIGKILL")
                    ssh_tunnel_proc.kill();
                    ssh_tunnel_proc = None
            else:
                log.debug('No tunnel exists')
        else:
            log.debug('No tunnel exists')

def get_base_rsync_command(clean = False, force_dry_run=False):
    cmd = None
    base = PartialFormatter().format(rsync_cmd, other_args='') if clean else PartialFormatter().format(rsync_cmd, other_args=rsync_other_args)
    if not force_dry_run and not args.dry_run:
        cmd = base.replace('--dry-run', '')
    else:
        cmd = base
    if args.password_file: 
        pwd = rsync_pass_file.format(password_file=args.password_file[0])
        cmd = PartialFormatter().format(cmd, insert_point=pwd)
    else:
        cmd = PartialFormatter().format(cmd, insert_point='')
    return cmd



def read_proc_output(proc, name, level):
    log.debug('Start polling for %s', name)

    out = proc.stdout
    err = proc.stderr
    out_buff = []
    err_buff = []

    def read_pipe(t, proc, pipe, level, buff):
        while True:
            try:
                line = pipe.readline()
                if not line or len(line) == 0:
                    break
                log.log(level, '[%s][%s]\t%s', proc, t, line.rstrip())
                buff.append(line)
            except:
                pass

    stderr_thread = Thread(target=read_pipe,
                                     args=('stderr', name, err, logging.DEBUG, err_buff))
    stdout_thread = Thread(target=read_pipe,
                                     args=('stdout', name, out, logging.DEBUG, out_buff))
    stderr_thread.start()
    stdout_thread.start()
    stdout_thread.join()
    stderr_thread.join()
    proc.wait()
    return ''.join(iter(out)), ''.join(iter(err))



def has_changes():
    log.info('Checking for changes...')
    cmd = get_base_rsync_command(force_dry_run=True)
    rsync = cmd.format(target='latest', source=args.dir, base=args.url).split()
    log.debug('invoke %r', ' '.join(iter(rsync)))

    proc = subprocess.Popen(rsync, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = read_proc_output(proc, 'rsync', logging.DEBUG)
    errcode = proc.poll()
    if errcode == 0:
        result = not (not out and len(out) == 0 and not err and len(err) == 0)
        log.info('Changes detected!' if result else 'No changes detected!')
        return result
    else:
        log.error('Unable to determine if there are changes. rsync error code %i', errcode)
        exitcode = 1
        raise BackupException('Unable to determine if there are changes.')
    

def update_prev_link():
    log.info('Updates symlink %s/prev to point to the current increment', args.url)

   
    cmd = get_base_rsync_command(True)
    rsync = (cmd.format(target='latest', base=args.url, source='')[0:-1] + ' --list-only').split()
    log.debug('invoke %r', ' '.join(iter(rsync)))

    proc = subprocess.Popen(rsync, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    read_proc_output(proc, 'rsync', logging.DEBUG)
    
    errcode = proc.poll()
    if errcode == 0:
        ls = out.split('\n')
        if len(ls) > 0 and len(ls[0]) > 0 and ls[0][0] == 'l':
            log.debug('good "latest" is a symlink')
            cmd = get_base_rsync_command(True)
            rsync = cmd.format(target=TMP, base='', source=(args.url + 'latest')).split()
            log.debug('invoke %r', ' '.join(iter(rsync)))
            proc = subprocess.Popen(rsync, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
            read_proc_output(proc, 'rsync', logging.DEBUG)

            errcode = proc.poll()
            if errcode == 0:

                
                log.debug('"latest" donloaded in %s', TMP)

                latest_tmp = TMP + '/latest'
                prev_tmp = TMP + '/prev'
                log.debug('rename %s to %s', latest_tmp, prev_tmp)
                os.rename(latest_tmp, prev_tmp)
                cmd = get_base_rsync_command(True)
                rsync = cmd.format(target='', base=args.url, source=(prev_tmp))[0:-1].split()
                log.debug('invoke %r', ' '.join(iter(rsync)))
                proc = subprocess.Popen(rsync, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
                read_proc_output(proc, 'rsync', logging.DEBUG)


                errcode = proc.poll();
                if errcode  != 0:
                    log.error('Unable to upload updated "prev" link. rsync error code %i', errcode)
                    exitcode = 2
                    raise BackupException('Unable to determine if "latest" is a simlink.')
                log.debug('"prev" updated.')
            else:               
                log.error('Unable to determine if "latest" is a simlink. rsync error code %i', errcode)
                exitcode = 3
                raise BackupException('Unable to determine if "latest" is a simlink.')
    else:
        log.error('Unable to determine if "latest" is a simlink. rsync error code %i', errcode)
        exitcode = 4
        raise BackupException('Unable to determine if "latest" is a simlink.')

def update_latest_link(current_backup):
    log.info('Update "latest" to %s...', current_backup)
    latest_tmp = TMP + '/latest'
    os.symlink(current_backup, latest_tmp)
    cmd = get_base_rsync_command(True)
    rsync = cmd.format(target='', base=args.url, source=(latest_tmp))[0:-1].split()
    log.debug('invoke %r', ' '.join(iter(rsync)))
    proc = subprocess.Popen(rsync, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)

    read_proc_output(proc, 'rsync', logging.DEBUG)
    
    if proc.poll() != 0:
        log.error('Unable to upload updated "latest" link. rsync error code %i', errcode)
        exitcore = 5
        raise BackupException('Unable to determine if "latest" is a simlink.')
    

def create_dir_on_target(name):
    log.info('Create %s on %s...', name, args.url)
    tmpdir = TMP + '/' + name
    os.mkdir(tmpdir);
   
    cmd = get_base_rsync_command()
    rsync = cmd.format(target='', source=tmpdir, base=args.url).replace('--delete','')[0:-1].split()

    log.debug('invoke %r', ' '.join(iter(rsync)))

    proc = subprocess.Popen(rsync, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    read_proc_output(proc, 'rsync', logging.DEBUG)

    os.rmdir(tmpdir)
    
    if proc.poll() != 0:
        log.error('Unable to create dir %s on %s. rsync error code %i', name, args.url, errcode)
        exitcode = 6
        raise BackupException('Unable to create dir on TARGET')


def create_new_increment():
    log.info('Create new increment...')

    create_dir_on_target(current_backup)
    update_prev_link()
    update_latest_link(current_backup);

    cmd = get_base_rsync_command()
    rsync = cmd.format(target=current_backup, source=args.dir, base=args.url).split()
    log.debug('invoke %r', ' '.join(iter(rsync)))

    proc = subprocess.Popen(rsync, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    read_proc_output(proc, 'rsync', logging.DEBUG)
    
    if proc.poll() != 0:
        log.error('[INC] Upload failed. Please resolve the errors below and invoke with "continue"')
        exitcode = 7
        raise BackupException('Unable to create dir on TARGET')

def create_full():
    log.info('Create new full backup...') 
    create_dir_on_target(current_backup)
    update_latest_link(current_backup);

    cmd = get_base_rsync_command()
    rsync = cmd.format(target=current_backup, source=args.dir, base=args.url).split()
    log.debug('invoke %r', ' '.join(iter(rsync)))

    proc = subprocess.Popen(rsync, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    read_proc_output(proc, 'rsync', logging.DEBUG)
    
    if proc.poll() != 0:
        log.error('[FULL] Upload failed. Please resolve the errors below and invoke with "continue"')
        exitcode = 8
        raise BackupException('Unable to create dir on TARGET')
    
def continue_backup():
    log.info('Continue last backup: start') 
    cmd = get_base_rsync_command()
    rsync = cmd.format(target='latest', source=args.dir, base=args.url).split()
    log.debug('invoke %r', ' '.join(iter(rsync)))

    proc = subprocess.Popen(rsync, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    read_proc_output(proc, 'rsync', logging.DEBUG)
    
    if proc.poll() != 0:
        log.error('[CONTINUE] Upload failed. Please resolve the errors below and invoke with "continue"')
        exitcode = 9
        raise BackupException('Unable to create dir on TARGET')


def execute_prologue():
    if args and args.prologue and args.prologue[0] and len(args.prologue[0]) > 0:
        log.info('execute prologue "%s"', args.prologue[0])
        proc = subprocess.Popen(args.prologue, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
        read_proc_output(proc, args.prologue[0], logging.DEBUG)
#        out, err = proc.communicate()
        code = proc.poll()
        if code  != 0:
            log.error('Prologue returned error: %i', code)
            exitcode = 10
            raise BackupException('Prologue returned error')       

def execute_epilogue():
    if args and args.epilogue and args.epilogue[0] and len(args.epilogue[0]) > 0:
        log.info('execute epilogue "%s"', args.epilogue[0])
        proc = subprocess.Popen(args.epilogue, bufsize=512, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
        read_proc_output(proc, args.epilogue[0], logging.DEBUG)
#        out, err = proc.communicate()
        code = proc.poll()
        if code  != 0:
            log.error('Epilogue returned error: %i', code)
            exitcode = 11
            raise BackupException('Epilogue returned error')       
        

def process_arguments():
    if args.no_delete:
        rsync_other_args = rsync_other_args.replace('--delete','')


def main():
    global exitcode
    global TMP
    try:
        parse_arguments()
        create_logger()
        log_arguments()
        process_arguments()
        tmp = tempfile.gettempdir()
        if not tmp or tmp == '':
            log.error('Cannot determine temoporary directory please set TMP, TEMP or TEMPDIR')
            exitcode = 12
            raise Exception("Cannot determine temoporary")
        
        execute_prologue()
        
        TMP = tempfile.mkdtemp()

        if args.ssh_tunnel:
            create_tunnel()
            pass

        if args.type == 'inc':
            log.info('Starting incremental backup...')
            if has_changes():
                create_new_increment()
            log.info('Incremental backup done.')
            pass
        elif args.type == 'continue':
            log.info('Continue last backup...')
            continue_backup()
            log.info('Continue backup done.')           
            pass
        elif args.type == 'full':
            log.info('Starting full backup...')
            create_full()
            log.info('Full backup done.')
            pass
        elif args.type == 'tunnel':
            if ssh_tunnel_proc:
                log.info('Tunnel ready usre Control-C to quit')
                while True:
                    tunnel_event.wait(1)
                    if not tunnel_event.is_set():
                        time.sleep(1);
            else:
                exitcode = 13
                log.error('To use  "tunnel" you must pass --ssh-tunnel argument.')
    except BackupException as be:
        log.debug("Last error trace", exc_info=True)
    except Exception as e:
        exitcode = 255
        log.error('Unexpected exception!',exc_info=True)
        pass
    except KeyboardInterrupt:
        if args.type != 'tunnel':
            log.error('[INTERRUPTED] This is a bad thing using "continue" next time will be best choice.')
            pass
        pass
    term_ssh_tunnel();
    execute_epilogue();
    log.info('Clean up.')
    shutil.rmtree(TMP+'/')
    
    
if __name__ == '__main__':
    try:
        main()
    except:
        if log:
            log.error('Unexpected exception!',exc_info=True)
        if exitcode == 0:
            exitcode = 1000
        term_ssh_tunnel()
        execute_epilogue()
        pass
    sys.exit(exitcode)
